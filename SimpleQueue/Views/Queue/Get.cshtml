@model SimpleQueue.WebUI.Models.ViewModels.GetQueueViewModel
@using SimpleQueue.Domain.Entities;
@{
    ViewData["Title"] = "Queue";
    
    var isDelayed = false;
    if (TypeName.Delayed == Model.Type) {
        isDelayed = true;
    }
}

@{
    var currentUserInQueueId = "";
    var availablePlaces = 0;
    DateTime? destinationTime = new DateTime();

    foreach (var user in Model.Users) {
        if( user.Id == Model.YourId){
            currentUserInQueueId = user.IdInQueue.ToString();
            destinationTime = user.DestinationTime;
        }
        if (user.Id == new Guid()){
            availablePlaces += 1;
        }
    }

    string formattedDate = destinationTime.HasValue 
    ? destinationTime.Value.ToString("dd MMM HH:mm")
    : "";
    var isUserIn = currentUserInQueueId != null;

    var qrCodeLink = "/queue/" + @Model.Id + "/qrcode";

    var queueImage = (@Model.ImageLink == null) ? "/images/queue/queue-image.svg" : @Model.ImageLink;
}

<link rel="stylesheet" href="~/css/get-queue.css" asp-append-version="true" />

<input type="hidden" id="queue-id" value="@Model.Id" />

<div class="main-body">
    <div class="queue-info">
        <div class="queue-image-container">
            <img src=@(Model.ImageLink == null ? "/images/queue/queue-image.svg" : Model.ImageLink)>
        </div>
        <div class="container-for-info">
            <div class="queue-information">
                <div class="queue-title">
                    @Model.Title
                </div>
                <div class="queue-description">
                    @Model.Description
                </div>
            </div>
            <div class="queue-info-right-part">
                <a class="edit-queue-image copy-image" onclick="copyQueueLink()">
                    <img class="copy-image" src="~/images/queue/copy-link.png">
                </a>
                <a class="edit-queue-image" href=@qrCodeLink>
                    <img src="~/images/queue/queue-qrcode-example.svg">
                </a>
                <div id="status-queue-image" class="status-queue-image" 
                style=@(Model.IsFrozen == false ? "background-color:#82FF9D":"")></div>
            </div>
        </div>
        
    </div>
    <div class="queue-content">
        <div class="user-in-queue-container">
            @foreach (var user in Model.Users)
            {
                @if (isDelayed) {
                    @if (user.Id == null || user.Id == Guid.Empty) {
                        <div class="user-join-button" id="user-field-@user.IdInQueue"
                        style="cursor:pointer;background-color: #a881af;color: white" onclick="enterDelayedQueue('@Model.Id', '@user.IdInQueue')" >
                            <div class="user-info">
                                <div class="user-name" id="username-@user.IdInQueue">
                                    <div>Available</div>
                                    
                                    <input class="trash-icon" onclick="leaveDelayedQueue('@Model.Id', '@user.IdInQueue')" 
                                    id="trash-image-@user.IdInQueue" type="image" src="~/images/queue/trash-icon.svg"
                                    style="display:none"/>
                                </div>
                                <div class="destination-time">
                                    @(user.DestinationTime.HasValue 
                                        ? user.DestinationTime.Value.ToString("dd MMM HH:mm")
                                        : "")
                                </div>
                            </div>
                        </div>
                    }
                    else{
                        <div class="user-join-button" id="user-field-@user.IdInQueue">
                            <div class="user-info">
                                <div class="user-name" id="username-@user.IdInQueue">
                                    <div>@user.Username</div>
                                    
                                    <input class="trash-icon" onclick="leaveDelayedQueue('@Model.Id', '@user.IdInQueue')" 
                                    id="trash-image-@user.IdInQueue" type="image" src="~/images/queue/trash-icon.svg"
                                    style=@(Model.OwnerId == Model.YourId || user.Id == Model.YourId ? "":"display:none")/>
                                </div>
                                <div class="destination-time">
                                    @(user.DestinationTime.HasValue 
                                        ? user.DestinationTime.Value.ToString("dd MMM HH:mm")
                                        : "")
                                </div>
                            </div> 
                        </div>
                    }
                }
                else {
                    <div class="user-position" id="user-@user.IdInQueue">
                        <div class="user-info">
                            <div class="user-name">
                                @user.Username
                            </div>
                            <div class="delete-user" style=@(Model.OwnerId == Model.YourId ? "":"display:none")>
                                <input onclick="leaveQueue('@Model.Id', '@user.IdInQueue')" id="trash-image-@user.IdInQueue" type="image" src="~/images/queue/trash-icon.svg" />
                            </div>
                        </div>
                    </div>
                }
                
            }
        </div>
        <div class="queue-controll-panel">
            <div class="controll-buttons">
                <div class="people-in-queue controll-object">
                    <div id="admin-number" class="number-of-people">@Model.Users.Count()</div>
                    <div class="in-queue">In Queue</div>
                </div>
                @if(User.Identity.IsAuthenticated && Model.YourId == Model.OwnerId){
                    <button class="next-button controll-object"
                    onclick="nextUser('@Model.Id', '@isDelayed')">
                        <div class="next-text">Next</div>
                    </button>
                    <button class="deactivate-button controll-object"
                        id="freeze-button"
                        onclick="freezeQueue('@Model.Id')" 
                        style=@(Model.IsFrozen == false ? "":"display:none")>
                        <img class="freeze-icon" src="~/images/queue/freeze-icon-2.png"/>
                        <div class="deactivate-text">Freeze</div>
                    </button>
                    <button class="deactivate-button controll-object" 
                        id="unfreeze-button"    
                        onclick="freezeQueue('@Model.Id')" 
                        style=@(Model.IsFrozen == false ? "display:none":"")>
                        <img class="freeze-icon" src="~/images/queue/unfreeze-icon.png"/>
                        <div class="deactivate-text">UnFreeze</div>
                    </button>
                }
                else{
                    <div id="your-position-is-not-null" class="position-in-queue people-in-queue controll-object"
                    style=@(Model.YourPosition != null ? "":"display:none")>
                        <div class="position-user">@Model.YourPosition</div>
                        <div class="next-text">You</div>
                    </div>

                    
                    @if (!isDelayed){
                        <button id="leave-queue-button" class="deactivate-button controll-object"
                        onclick="leaveQueue('@Model.Id', '@currentUserInQueueId')"
                        style=@(Model.YourPosition != null ? "":"display:none")>
                            <div class="deactivate-text">Leave</div>
                        </button>
                    }
                    

                    <div id="your-position-is-null" class="position-in-queue people-in-queue controll-object"
                    style=@(Model.YourPosition == null ? "":"display:none")>
                        @if (destinationTime == new DateTime() || destinationTime == null) {
                            <div style="font-size:24px;line-height: 30px" class="position-user"></div>
                            <div style="font-size:24px" class="next-text"></div>
                        }
                        else {
                            <div style="font-size:24px;line-height: 30px" class="position-user">@formattedDate</div>
                            <div style="font-size:24px" class="next-text">Your time</div>
                        }
                    </div>

                    @if (isDelayed) {
                        <div id="your-position-is-not-null" class="position-in-queue people-in-queue controll-object"
                        style="background-color:#fc945a">
                            <div id="available-places" class="position-user">@availablePlaces</div>
                            <div class="next-text">Available places</div>
                        </div>
                    } 
                    else {
                        <button id="join-queue-button" class="deactivate-button controll-object"
                        onclick="enterQueue('@Model.Id')"
                        style=@(Model.YourPosition == null ? "":"display:none")>
                            <div class="deactivate-text">Enter</div>
                        </button>
                    } 
                    
                }
                <button class="end-button controll-object"
                    onclick="clicker()">
                    <div id="clicker-value" class="clicker-number">0</div>
                    <div class="end-text">Click</div>
                </button>               
            </div>
        </div>
    </div>
</div>

<script src="~/lib/signalr/signalr.js"></script>
<script src="~/js/get-queue.js"></script>
